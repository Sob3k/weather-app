{"version":3,"sources":["components/current-weather/current-weather.component.jsx","components/forecast-day/forecast-day.component.jsx","components/forecast-list/forecast-list.component.jsx","components/search-form/search-form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CurrentWeather","props","className","name","weatherStatus","main","temp","src","weather","icon","alt","description","pressure","wind","speed","allDays","ForecastDay","Date","dt","getDay","ForecastList","forecast","map","day","index","key","SearchForm","onSubmit","handleClick","type","placeholder","required","App","getForecast","event","a","preventDefault","city","target","value","fetch","then","response","json","cod","Promise","reject","setState","cityName","weatherConditions","list","filter","elem","dt_txt","includes","alert","current","resolved","state","undefined","this","slice","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4303becb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './current-weather.styles.css';\r\n\r\nexport const CurrentWeather = (props) => (\r\n    <div className=\"CurrentWeather\">\r\n        <h1>{props.name}</h1>\r\n        <p>{props.weatherStatus.main.temp} &deg;C</p>\r\n        <p>\r\n            <img src={\"http://openweathermap.org/img/wn/\"+props.weatherStatus.weather[0].icon + \"@2x.png\"} alt=\"description\"/>\r\n        </p>\r\n        <p>{props.weatherStatus.weather[0].description}</p>\r\n        <p>pressure {props.weatherStatus.main.pressure} hPa</p>\r\n        <p>wind {props.weatherStatus.wind.speed} m/s</p>\r\n    </div>\r\n)","import React from \"react\";\r\nimport './forecast-day.styles.css';\r\n\r\nlet allDays= ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nexport const ForecastDay = (props) => (\r\n    <div className='Forecast-container'>\r\n        <h2>{allDays[(new Date((props.weatherStatus.dt)*1000)).getDay()]}</h2>\r\n        <img src={\"http://openweathermap.org/img/wn/\"+props.weatherStatus.weather[0].icon + \"@2x.png\"} alt=\"description\"/>\r\n        <p>{props.weatherStatus.main.temp} &deg;C</p>\r\n        <p>{props.weatherStatus.weather[0].description}</p>\r\n    </div>\r\n)","import React from \"react\";\r\nimport '../forecast-day/forecast-day.component';\r\nimport './forecast-list.styles.css';\r\nimport {ForecastDay} from \"../forecast-day/forecast-day.component\";\r\n\r\nexport const ForecastList = (props) => (\r\n    <div className='ForecastList'>\r\n        {props.forecast.map((day,index) =>(\r\n            <ForecastDay key={index} weatherStatus={props.forecast[index]} />\r\n        ))}\r\n    </div>\r\n)","import React from \"react\";\r\nimport './search-form.styles.css';\r\n\r\nexport const SearchForm = (props) => (\r\n    <div className=\"SearchForm-container\">\r\n        <form onSubmit={props.handleClick}>\r\n        <input\r\n            type=\"text\"\r\n            className=\"searchInput\"\r\n            placeholder= \"City\"\r\n            name=\"city\"\r\n            required\r\n        />\r\n        <button type=\"submit\" className=\"form-btn\">\r\n            GET FORECAST\r\n        </button>\r\n        </form>\r\n    </div>\r\n)","import React from 'react';\nimport {CurrentWeather} from \"./components/current-weather/current-weather.component\";\nimport './App.css';\nimport {ForecastList} from \"./components/forecast-list/forecast-list.component\";\nimport {SearchForm} from \"./components/search-form/search-form.component\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n      this.state = {\n          cityName: undefined,\n          weatherConditions: [],\n          current: [],\n          resolved: false,\n      };\n  }\n\n    getForecast = async(event)=>{\n       event.preventDefault();\n        const city = event.target.city.value;\n        await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=8422f723ab81e0619da72f354ab281d4`)\n            .then(response=>response.json())\n            .then(response => {\n                if(response.cod===\"404\"){return Promise.reject()}\n                this.setState({\n                    cityName: response.city.name,\n                    weatherConditions: response.list.filter(elem => elem.dt_txt.includes(\"15:00:00\")),\n                })\n            })\n            .then(await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=8422f723ab81e0619da72f354ab281d4`)\n                .then(response => response.json())\n                .then(response => {\n                    if(response.cod===\"404\"){\n                        alert('No city found');\n                        return Promise.reject()\n                    }\n                    this.setState({\n                        current: response,\n                        resolved: true\n                    })\n                }));\n    }\n\n\n  render() {\n    const {cityName,weatherConditions,current}=this.state;\n    const resolved=this.state.resolved;\n    return (\n        <div className=\"App\">\n            <h1>Weather App</h1>\n         <SearchForm\n             handleClick={this.getForecast}\n         />\n            {resolved? (\n                [\n                <CurrentWeather  key='currentW' name={cityName} weatherStatus={current}/>,\n                <ForecastList key='forecastl' forecast={weatherConditions.slice(1)}/>\n                ]\n            ):null\n            }\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}