{"version":3,"sources":["components/current-weather/current-weather.component.jsx","components/forecast-day/forecast-day.component.jsx","components/forecast-list/forecast-list.component.jsx","components/search-form/search-form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CurrentWeather","props","className","name","weatherStatus","main","temp","src","weather","icon","alt","description","pressure","wind","speed","allDays","ForecastDay","Date","dt","getDay","ForecastList","forecast","map","day","index","key","SearchForm","onSubmit","handleClick","type","placeholder","required","App","getForecast","event","a","preventDefault","city","target","value","fetch","then","response","json","cod","Promise","reject","setState","cityName","weatherConditions","list","filter","elem","dt_txt","includes","alert","current","resolved","state","undefined","this","slice","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+WAGaA,G,MAAiB,SAACC,GAAD,OAC1B,yBAAKC,UAAU,kBACX,4BAAKD,EAAME,MACX,2BAAIF,EAAMG,cAAcC,KAAKC,KAA7B,UACA,2BACI,yBAAKC,IAAK,oCAAoCN,EAAMG,cAAcI,QAAQ,GAAGC,KAAO,UAAWC,IAAI,iBAEvG,2BAAIT,EAAMG,cAAcI,QAAQ,GAAGG,aACnC,uCAAaV,EAAMG,cAAcC,KAAKO,SAAtC,QACA,mCAASX,EAAMG,cAAcS,KAAKC,MAAlC,WCTJC,G,YAAS,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,aAEnEC,EAAc,SAACf,GAAD,OACvB,yBAAKC,UAAU,sBACX,4BAAKa,EAAS,IAAIE,KAA8B,IAAxBhB,EAAMG,cAAcc,IAAWC,WACvD,yBAAKZ,IAAK,oCAAoCN,EAAMG,cAAcI,QAAQ,GAAGC,KAAO,UAAWC,IAAI,gBACnG,2BAAIT,EAAMG,cAAcC,KAAKC,KAA7B,UACA,2BAAIL,EAAMG,cAAcI,QAAQ,GAAGG,eCL9BS,G,MAAe,SAACnB,GAAD,OACxB,yBAAKC,UAAU,gBACVD,EAAMoB,SAASC,KAAI,SAACC,EAAIC,GAAL,OAChB,kBAAC,EAAD,CAAaC,IAAKD,EAAOpB,cAAeH,EAAMoB,SAASG,WCLtDE,G,MAAa,SAACzB,GAAD,OACtB,yBAAKC,UAAU,wBACX,0BAAMyB,SAAU1B,EAAM2B,aACtB,2BACIC,KAAK,OACL3B,UAAU,cACV4B,YAAa,OACb3B,KAAK,OACL4B,UAAQ,IAEZ,4BAAQF,KAAK,SAAS3B,UAAU,YAAhC,oBCqDO8B,E,kDA3Db,aAAe,IAAD,8BACZ,gBAUAC,YAXY,uCAWE,WAAMC,GAAN,eAAAC,EAAA,6DACXD,EAAME,iBACCC,EAAOH,EAAMI,OAAOD,KAAKE,MAFrB,KAGJC,MAAM,sDAAD,OAAuDH,EAAvD,yDACNI,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAC,GACF,GAAkB,QAAfA,EAASE,IAAa,OAAOC,QAAQC,SACxC,EAAKC,SAAS,CACVC,SAAUN,EAASL,KAAKlC,KACxB8C,kBAAmBP,EAASQ,KAAKC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,OAAOC,SAAS,oBATvE,SAYMd,MAAM,qDAAD,OAAsDH,EAAtD,yDACZI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,GAAkB,QAAfA,EAASE,IAER,OADAW,MAAM,iBACCV,QAAQC,SAEnB,EAAKC,SAAS,CACVS,QAASd,EACTe,UAAU,OArBhB,wCAYLhB,KAZK,2DAXF,sDAGV,EAAKiB,MAAQ,CACTV,cAAUW,EACVV,kBAAmB,GACnBO,QAAS,GACTC,UAAU,GAPJ,E,qDAsCJ,IAAD,EACoCG,KAAKF,MAAzCV,EADA,EACAA,SAASC,EADT,EACSA,kBAAkBO,EAD3B,EAC2BA,QAC5BC,EAASG,KAAKF,MAAMD,SAC1B,OACI,yBAAKvD,UAAU,OACX,2CACH,kBAAC,EAAD,CACI0B,YAAagC,KAAK3B,cAElBwB,EACG,CACA,kBAAC,EAAD,CAAiBhC,IAAI,WAAWtB,KAAM6C,EAAU5C,cAAeoD,IAC/D,kBAAC,EAAD,CAAc/B,IAAI,YAAYJ,SAAU4B,EAAkBY,MAAM,MAElE,U,GArDIC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4303becb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './current-weather.styles.css';\r\n\r\nexport const CurrentWeather = (props) => (\r\n    <div className=\"CurrentWeather\">\r\n        <h1>{props.name}</h1>\r\n        <p>{props.weatherStatus.main.temp} &deg;C</p>\r\n        <p>\r\n            <img src={\"http://openweathermap.org/img/wn/\"+props.weatherStatus.weather[0].icon + \"@2x.png\"} alt=\"description\"/>\r\n        </p>\r\n        <p>{props.weatherStatus.weather[0].description}</p>\r\n        <p>pressure {props.weatherStatus.main.pressure} hPa</p>\r\n        <p>wind {props.weatherStatus.wind.speed} m/s</p>\r\n    </div>\r\n)","import React from \"react\";\r\nimport './forecast-day.styles.css';\r\n\r\nlet allDays= ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nexport const ForecastDay = (props) => (\r\n    <div className='Forecast-container'>\r\n        <h2>{allDays[(new Date((props.weatherStatus.dt)*1000)).getDay()]}</h2>\r\n        <img src={\"http://openweathermap.org/img/wn/\"+props.weatherStatus.weather[0].icon + \"@2x.png\"} alt=\"description\"/>\r\n        <p>{props.weatherStatus.main.temp} &deg;C</p>\r\n        <p>{props.weatherStatus.weather[0].description}</p>\r\n    </div>\r\n)","import React from \"react\";\r\nimport '../forecast-day/forecast-day.component';\r\nimport './forecast-list.styles.css';\r\nimport {ForecastDay} from \"../forecast-day/forecast-day.component\";\r\n\r\nexport const ForecastList = (props) => (\r\n    <div className='ForecastList'>\r\n        {props.forecast.map((day,index) =>(\r\n            <ForecastDay key={index} weatherStatus={props.forecast[index]} />\r\n        ))}\r\n    </div>\r\n)","import React from \"react\";\r\nimport './search-form.styles.css';\r\n\r\nexport const SearchForm = (props) => (\r\n    <div className=\"SearchForm-container\">\r\n        <form onSubmit={props.handleClick}>\r\n        <input\r\n            type=\"text\"\r\n            className=\"searchInput\"\r\n            placeholder= \"City\"\r\n            name=\"city\"\r\n            required\r\n        />\r\n        <button type=\"submit\" className=\"form-btn\">\r\n            GET FORECAST\r\n        </button>\r\n        </form>\r\n    </div>\r\n)","import React from 'react';\r\nimport {CurrentWeather} from \"./components/current-weather/current-weather.component\";\r\nimport './App.css';\r\nimport {ForecastList} from \"./components/forecast-list/forecast-list.component\";\r\nimport {SearchForm} from \"./components/search-form/search-form.component\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n      this.state = {\r\n          cityName: undefined,\r\n          weatherConditions: [],\r\n          current: [],\r\n          resolved: false,\r\n      };\r\n  }\r\n\r\n    getForecast = async(event)=>{\r\n       event.preventDefault();\r\n        const city = event.target.city.value;\r\n        await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=8422f723ab81e0619da72f354ab281d4`)\r\n            .then(response=>response.json())\r\n            .then(response => {\r\n                if(response.cod===\"404\"){return Promise.reject()}\r\n                this.setState({\r\n                    cityName: response.city.name,\r\n                    weatherConditions: response.list.filter(elem => elem.dt_txt.includes(\"15:00:00\")),\r\n                })\r\n            })\r\n            .then(await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=8422f723ab81e0619da72f354ab281d4`)\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    if(response.cod===\"404\"){\r\n                        alert('No city found');\r\n                        return Promise.reject()\r\n                    }\r\n                    this.setState({\r\n                        current: response,\r\n                        resolved: true\r\n                    })\r\n                }));\r\n    }\r\n\r\n\r\n  render() {\r\n    const {cityName,weatherConditions,current}=this.state;\r\n    const resolved=this.state.resolved;\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Weather App</h1>\r\n         <SearchForm\r\n             handleClick={this.getForecast}\r\n         />\r\n            {resolved? (\r\n                [\r\n                <CurrentWeather  key='currentW' name={cityName} weatherStatus={current}/>,\r\n                <ForecastList key='forecastl' forecast={weatherConditions.slice(1)}/>\r\n                ]\r\n            ):null\r\n            }\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}